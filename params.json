{
  "name": "Roaster",
  "tagline": "A Java Parser library that allows easy parsing and formatting of Java source files",
  "body": "Roaster - The only Java source parser library you'll ever need\r\n===============================================================\r\n\r\nRoaster (formerly known as java-parser) is a library that allows easy parsing and formatting of java source files. \r\nRoaster introduces a fluent interface to manipulate Java source files, like adding fields, methods, annotations and so on.\r\n\r\nInstallation\r\n============\r\n\r\n* If you are using Maven, add the following dependencies to your project: \r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.jboss.forge.roaster</groupId>\r\n  <artifactId>roaster-api</artifactId>\r\n  <version>${version.roaster}</version>\r\n</dependency>\r\n<dependency>\r\n  <groupId>org.jboss.forge.roaster</groupId>\r\n  <artifactId>roaster-jdt</artifactId>\r\n  <version>${version.roaster}</version>\r\n  <scope>runtime</scope>\r\n</dependency>\r\n```\r\n\r\n* Otherwise, download and extract (or build from sources) the most recent [distribution](http://search.maven.org/#search|ga|1|a%3A%22roaster-distribution%22) containing the Roaster distribution and command line tools\r\n\r\nUsage\r\n=====\r\n\r\nCLI\r\n---\r\nExecute roaster by running the following script (add these to your $PATH for convenience):\r\n\r\n```\r\nbin/roaster     (Unix/Linux/OSX)\r\nbin/roaster.bat (Windows)\r\n````\r\n\r\nOptions described here:\r\n\r\n```\r\n$ roaster -h\r\n\r\nUsage: roaster [OPTION]... FILES ... \r\nThe fastest way to build applications, share your software, and enjoy doing it. \r\n\r\n-c, --config [CONFIG_FILE]\r\n\t specify the path to the Eclipse code format profile (usually found at '$PROJECT/.settings/org.eclipse.jdt.core.prefs') \r\n\r\n-r, --recursive\r\n\t format files in found sub-directories recursively \r\n\r\nFILES... \r\n\t specify one or more space-separated files or directories to format \r\n\r\n-h, --help\r\n\t display this help and exit \r\n```\r\n\r\nJava Parser API\r\n---------------\r\n\r\nExample:\r\n```java\r\nRoaster.parse(JavaClassSource.class, \"public class HelloWorld {}\");\r\n```\r\n\r\nJava Source Code Generation API\r\n-------------------------------\r\n\r\nRoaster provides a fluent API to generate java classes. Here an example:\r\n\r\n```java\r\nfinal JavaClassSource javaClass = Roaster.create(JavaClassSource.class);\r\njavaClass.setPackage(\"com.company.example\").setName(\"Person\");\r\n\r\njavaClass.addInterface(Serializable.class);\r\njavaClass.addField()\r\n  .setName(\"serialVersionUID\")\r\n  .setType(\"long\")\r\n  .setLiteralInitializer(\"1L\")\r\n  .setPrivate()\r\n  .setStatic(true)\r\n  .setFinal(true);\r\n\r\njavaClass.addProperty(Integer.class, \"id\").setMutable(false);\r\njavaClass.addProperty(String.class, \"firstName\");\r\njavaClass.addProperty(\"String\", \"lastName\");\r\n\r\njavaClass.addMethod()\r\n  .setConstructor(true)\r\n  .setPublic()\r\n  .setBody(\"this.id = id;\")\r\n  .addParameter(Integer.class, \"id\");\r\n```\r\n\r\nWill produce:\r\n\r\n```java\r\npackage com.company.example;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic class Person implements Serializable {\r\n\r\n   private static final long serialVersionUID = 1L;\r\n   private final Integer id;\r\n   private String firstName;\r\n   private String lastName;\r\n\r\n   public Integer getId() {\r\n      return id;\r\n   }\r\n\r\n   public String getFirstName() {\r\n      return firstName;\r\n   }\r\n\r\n   public void setFirstName(String firstName) {\r\n      this.firstName = firstName;\r\n   }\r\n\r\n   public String getLastName() {\r\n      return lastName;\r\n   }\r\n\r\n   public void setLastName(String lastName) {\r\n      this.lastName = lastName;\r\n   }\r\n\r\n   public Person(Integer id) {\r\n      this.id = id;\r\n   }\r\n}\r\n```\r\n\r\nJava Source Code Modification API\r\n---------------------------------\r\n\r\nOf course it is possible to mix both approaches (parser and writer) to modify Java code programmatically:\r\n\r\n```java\r\nJavaClassSource javaClass = \r\n  Roaster.parse(JavaClassSource.class, \"public class SomeClass {}\");\r\njavaClass.addMethod()\r\n  .setPublic()\r\n  .setStatic(true)\r\n  .setName(\"main\")\r\n  .setReturnTypeVoid()\r\n  .setBody(\"System.out.println(\\\"Hello World\\\");\")\r\n  .addParameter(\"java.lang.String[]\", \"args\");\r\nSystem.out.println(javaClass);\r\n```\r\n\r\nJavaDoc creation and parsing\r\n----------------------------\r\n \r\nHere is an example on how to add JavaDoc to a class:\r\n\r\n```java\r\nJavaClassSource javaClass = \r\n  Roaster.parse(JavaClassSource.class, \"public class SomeClass {}\");\r\nJavaDocSource javaDoc = javaClass.getJavaDoc();\r\n\r\njavaDoc.setFullText(\"Full class documentation\");\r\n// or \r\njavaDoc.setText(\"Class documentation text\");\r\njavaDoc.addTagValue(\"@author\",\"George Gastaldi\");\r\n\r\nSystem.out.println(javaClass);\r\n```\r\n\r\nFormatting the Java Source Code\r\n-------------------------------\r\n\r\nRoaster formats the Java Source Code by calling the format() method:\r\n\r\n```java\r\nString javaCode = \"public class MyClass{ private String field;}\";\r\nString formattedCode = Roaster.format(javaCode);\r\nSystem.out.println(formattedCode);\r\n```\r\n\r\nParsing the java unit \r\n----------------------\r\n\r\nThe link:http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.3[Java Language Specification] allows you to define multiple classes in the same .java file. Roaster supports parsing the entire unit by calling the parseUnit() method:\r\n\r\n```java\r\nString javaCode = \"public class MyClass{ private String field;} public class AnotherClass {}\";\r\n\r\nJavaUnit unit = Roaster.parseUnit(javaCode);\r\n\r\nJavaClassSource myClass = unit.getGoverningType();\r\nJavaClassSource anotherClass = (JavaClassSource) unit.getTopLevelTypes().get(1);\r\n```\r\n\r\nIssue tracker\r\n=============\r\n\r\n[ROASTER on JBossDeveloper](https://issues.jboss.org/browse/ROASTER). You might need to log in, in order to view the issues.\r\n\r\n\r\nGet in touch\r\n============\r\n\r\nRoaster uses the same forum and mailing lists as the [JBoss Forge](http://forge.jboss.org/) project. See the [JBoss Forge Community](http://forge.jboss.org/community) page.\r\n\r\n* [User forums](https://developer.jboss.org/en/forge)\r\n* [Developer forums](https://developer.jboss.org/en/forge/dev)\r\n\r\nLicense\r\n=======\r\n[Eclipse Public License - v 1.0](http://www.eclipse.org/legal/epl-v10.html)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}