Roaster
=======

Roaster (formerly known as java-parser) is a library that allows easy parsing and formatting of java source files. 
Roaster introduces a fluent interface to manipulate Java source files, like adding fields, methods, annotations and so on.

Installation
============
* Download (or build from sources) the most recent roaster-distribution-VERSION.zip.
.. Download link:https://repository.jboss.org/nexus/service/local/artifact/maven/redirect?r=releases&g=org.jboss.forge.roaster&a=roaster-distribution&v=LATEST&e=zip[Roaster (Latest)]
... This ZIP contains the Roaster distribution and command line tools

* Extract the ZIP to a directory and navigate to roaster-distribution-VERSION/bin directory


Usage
=====

CLI
---
Execute roaster by running the following script (add these to your $PATH for convenience):

[source]
----
bin/roaster     (Unix/Linux/OSX)
bin/roaster.bat (Windows)
----

Options described here:

[source,cmd]
----
$ roaster -h

Usage: roaster [OPTION]... FILES ... 
The fastest way to build applications, share your software, and enjoy doing it. 

-c, --config [CONFIG_FILE]
	 specify the path to the Eclipse code format profile (usually found at '$PROJECT/.settings/org.eclipse.jdt.core.prefs') 

-r, --recursive
	 format files in found sub-directories recursively 

FILES... 
	 specify one or more space-separated files or directories to format 

-h, --help
	 display this help and exit 
----

Java Parser API
---------------

Example:
```java
Roaster.parse(JavaClassSource.class, "public class HelloWorld {}");
```

Java Source Code Generation API
-------------------------------

Roaster provides a fluent API to generate java classes. Here an example:

```java
final JavaClassSource javaClass = Roaster.create(JavaClassSource.class);
javaClass.setPackage("com.company.example").setName("Person");

javaClass.addInterface(Serializable.class);
javaClass.addField()
  .setName("serialVersionUID")
  .setType("long")
  .setLiteralInitializer("1L")
  .setPrivate()
  .setStatic(true)
  .setFinal(true);

javaClass.addProperty("Integer", "id").setMutable(false);
javaClass.addProperty("String", "firstName");
javaClass.addProperty("String", "lastName");

javaClass.addMethod()
  .setConstructor(true)
  .setPublic()
  .setBody("this.id = id;")
  .addParameter(Integer.class, "id");
```

Will produce:

```java
package com.company.example;

import java.io.Serializable;
import java.lang.Integer;

public class Person implements Serializable
{

   private static final long serialVersionUID = 1L;
   private final Integer id;
   private String firstName;
   private String lastName;

   public Integer getId()
   {
      return id;
   }

   public String getFirstName()
   {
      return firstName;
   }

   public void setFirstName(String firstName)
   {
      this.firstName = firstName;
   }

   public String getLastName()
   {
      return lastName;
   }

   public void setLastName(String lastName)
   {
      this.lastName = lastName;
   }

   public Person(Integer id)
   {
      this.id = id;
   }
}
```

Java Source Code Modification API
---------------------------------

Of course it is possible to mix both approaches (parser and writer) to modify Java code programmatically:

```java
JavaClassSource javaClass = 
  Roaster.parse(JavaClassSource.class, "public class SomeClass {}");
javaClass.addMethod()
  .setPublic()
  .setStatic(true)
  .setName("main")
  .setReturnTypeVoid()
  .setBody("System.out.println(\"Hello World\");")
  .addParameter("java.lang.String[]", "args");
System.out.println(javaClass);
```

JavaDoc creation and parsing
----------------------------
 
Here is an example on how to add JavaDoc to a class:

```java
JavaClassSource javaClass = 
  Roaster.parse(JavaClassSource.class, "public class SomeClass {}");
JavaDocSource javaDoc = javaClass.getJavaDoc();

javaDoc.setFullText("Full class documentation");
// or 
javaDoc.setText("Class documentation text");
javaDoc.addTagValue("@author","George Gastaldi");

System.out.println(javaClass);
```

Formatting the Java Source Code
-------------------------------

Roaster formats the Java Source Code by calling the format() method:

```java
String javaCode = "public class MyClass{ private String field;}";
String formattedCode = Roaster.format(javaCode);
System.out.println(formattedCode);
```

Maven Artifacts
===============

Download http://search.maven.org/#search%7Cga%7C1%7Cg:%22org.jboss.forge.roaster%22[the latest .jar] or depend via Maven:

```xml
<dependency>
  <groupId>org.jboss.forge.roaster</groupId>
  <artifactId>roaster-api</artifactId>
  <version>${version.roaster}</version>
</dependency>
<dependency>
  <groupId>org.jboss.forge.roaster</groupId>
  <artifactId>roaster-jdt</artifactId>
  <version>${version.roaster}</version>
</dependency>
```

Issue tracker
=============

https://issues.jboss.org/browse/ROASTER[ROASTER on JBossDeveloper]. You might need to log in, in order to view the issues.


Get in touch
============

Roaster uses the same forum and mailing lists as the http://forge.jboss.org/[JBoss Forge] project. See the http://forge.jboss.org/community[JBoss Forge Community] page.

* https://developer.jboss.org/en/forge[User forums]
* https://developer.jboss.org/en/forge/dev[Developer forums]


Related / Similar projects
==========================

For the writer part:

* https://github.com/square/javawriter[square/javawriter]


License
=======
http://www.eclipse.org/legal/epl-v10.html[Eclipse Public License - v 1.0]
